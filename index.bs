<pre class='metadata'>
Title: Permissions
Repository: w3c/permissions
Status: ED
ED: https://w3c.github.io/permissions/
Shortname: permissions
Level: 1
Group: webappsec
Editor: Mounir Lamouri, Google Inc. https://google.com/
Editor: Marcos CÃ¡ceres, Mozilla https://mozilla.com/
Editor: Jeffrey Yasskin, Google Inc. https://google.com/

Abstract: The <cite>Permissions Standard</cite> defines common infrastructure for other specifications that need to interact with browser permissions. It also defines an API to allow web applications to query and request changes to the status of a given permission.
Mailing List: public-webappsec@w3.org
Mailing List Archives: http://lists.w3.org/Archives/Public/public-webappsec/

!Participate: <a href="https://github.com/w3c/permissions">We are on Github.</a>
!Participate: <a href="https://github.com/w3c/permissions/issues">File a bug.</a>
!Participate: <a href="https://github.com/w3c/permissions/commits/gh-pages">Commit history.</a>
!Implementation status: <a href="https://code.google.com/p/chromium/issues/detail?id=437770">Blink/Chromium</a>
!Implementation status: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1105827">Gecko</a>

Markup Shorthands: css no, markdown yes
</pre>
<pre class="anchors">
spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: interface
        text: TypeError; url: sec-native-error-types-used-in-this-standard-typeerror
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    type: dfn
        text: origin; url: browsers.html#origin-2
spec: promises-guide; urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide#
    type: dfn
        text: Transforming; url: transforming-by
        text: Promise-calling; url: promise-calling
</pre>
<pre class="link-defaults">
spec: html
    type: dfn
        text: browsing context
        text: environment settings object
        text: event handler
        text: event handler event type
        text: origin
        text: parent browsing context
        text: queue a task
        text: top-level browsing context
spec: ui-events
    type: dfn
        text: user agent
spec: webidl
    type: interface
        text: Promise
</pre>

<section class='non-normative'>
  <h2 id="scope-of-this-document">
    Scope of this document
  </h2>
  <p><em>This section is non-normative.</em></p>
  <p>
    This document's goal is to specify an API that will help developers to
    handle permissions on the Web platform. Web APIs have different ways to
    deal with permissions. The [[notifications]] API allows developers to
    request a permission and check the permission status explicitly. Others
    might only expose the status to web pages when they try to use the API,
    like the [[geolocation-API]] which fails if the permission was not
    granted without allowing the developer to check beforehand.
  </p>
  <p>
    Being able to know whether an API call is going to prompt is useful in
    order to provide a good user experience. Unfortunately, more often than
    not, those prompts can't be controlled by developers.
  </p>
  <p>
    The API specified in this document is meant to provide the tools so
    that web applications can improve their user experience when
    permissions are involved.
  </p>
  <p>
    The solution described in this document is meant to be extensible but
    isn't meant to be applicable to all the current and future permissions
    available in the web platform. If you are working on a specification
    that has a permission model that wouldn't fit in the model described in
    this document, please contact the editors or file an issue. We would
    love to hear about it.
  </p>
</section>
<section class='non-normative'>
  <h2 id="privacy-considerations">
    Privacy considerations
  </h2>
  <p><em>This section is non-normative.</em></p>
  <p>
    Permission states can be used as an element of fingerprinting by
    websites. Usually websites could already have access to the information
    but often through actually using the API which could lead to a
    permission request UI if the permission was not already granted. Thus,
    even though this API doesn't expose new fingerprinting data to
    websites, it makes it easier for them to have discreet access to it.
    Therefore, implementations are encouraged to have an option for users
    to block (globally or selectively) the querying of permission states.
  </p>
</section>
<section>
  <h2 id="permission-descriptor">
    Permission descriptor
  </h2>
  <pre class='idl' title=''>
    dictionary PermissionDescriptor {
      required PermissionName name;
    };
  </pre>
  <p>
    A permission is described by a name and other properties that depend on the
    name. The simplest permissions require only a name, but some others have
    more detailed structure that requires more information to describe it. In
    that case, they should define a customized <a>permission descriptor
    type</a> dictionary that inherits from {{PermissionDescriptor}}.
  </p>
</section>
<section>
  <h2 id="permission-registry">
    Permission Registry
  </h2>
  <pre class='idl' title=''>
    enum PermissionName {
      "geolocation",
      "notifications",
      "push",
      "midi",
      "camera",
      "microphone",
      "speaker",
      "device-info",
      "background-sync",
    };
  </pre>
  <p>
    Each enumeration value in the {{PermissionName}} enum identifies a
    <dfn export>permission</dfn>, which consists of the following
    algorithms and types:
  </p>
  <dl>
    <dt>
      A <dfn export>permission descriptor type</dfn>
    </dt>
    <dd>
      {{PermissionDescriptor}} or one of its subtypes.
      If unspecified, this defaults to {{PermissionDescriptor}}.
    </dd>
    <dt>
      A <dfn export>permission storage type</dfn>
    </dt>
    <dd>
      {{PermissionStorage}} or one of its subtypes.
      If unspecified, this defaults to {{PermissionStorage}}.
    </dd>
    <dt>
      A <dfn export>permission result type</dfn>
    </dt>
    <dd>
      {{PermissionStatus}} or one of its subtypes.
      If unspecified, this defaults to {{PermissionStatus}}.
    </dd>
    <dt>
      A <dfn export>permission query algorithm</dfn>
    </dt>
    <dd>
      Takes an instance of the <a>permission descriptor type</a>,
      an instance of the <a>permission storage type</a> that's currently
      stored for this <a>permission</a>, and a new or existing instance of
      the <a>permission result type</a>, and updates the <a>permission
      result type</a> instance with the query result. Used by
      {{Permissions}}' {{Permissions/query()}}
      method and the <a href="#PermissionStatus-update">PermissionStatus
      update steps</a>. If unspecified, this defaults to the <a>boolean
      permission query algorithm</a>.
    </dd>
    <dt>
      A <dfn export>permission request algorithm</dfn>
    </dt>
    <dd>
      Takes the previously-stored instance of the <a>permission storage
      type</a>, an instance of the <a>permission descriptor type</a>,
      and a newly-created instance of the <a>permission result type</a>.
      Shows the user any necessary prompt to try to increase permissions,
      and updates the instances of the <a>permission storage type</a> and
      <a>permission result type</a> to match. May return a {{Promise}}
      if the request can fail exceptionally. (Merely being denied
      permission is not exceptional.) Used by {{Permissions}}'
      {{Permissions/request()}} method, which handles
      reading and writing the <a>permission store</a>. If unspecified, this
      defaults to the <a>boolean permission request algorithm</a>.
    </dd>
    <dt>
      A <dfn export>permission revocation algorithm</dfn>
    </dt>
    <dd>
      Takes no arguments. Updates any other parts of the implementation
      that need to be kept in sync after an entry is removed from the
      permission store. Triggered by {{Permissions}}'
      {{Permissions/revoke()}} method. If unspecified, this
      defaults to doing nothing.
    </dd>
  </dl>
  <p>
    A <dfn export>boolean permission</dfn> is a <a>permission</a> with all types
    and algorithms defaulted.
  </p>
  <section>
    <h3 id="geolocation">
      Geolocation
    </h3>
    <p>
      The <dfn for="PermissionName" enum-value>"geolocation"</dfn>
      permission is the permission associated with the usage of the
      [[geolocation-API]]. It is a <a>boolean permission</a>.
    </p>
  </section>
  <section>
    <h3 id="notifications">
      Notifications
    </h3>
    <p>
      The <dfn for="PermissionName" enum-value>"notifications"</dfn>
      permission is the permission associated with the usage of the
      [[notifications]] API. It is a <a>boolean permission</a>.
    </p>
  </section>
  <section>
    <h3 id="push">
      Push
    </h3>
    <p>
      The <dfn for="PermissionName" enum-value>"push"</dfn>
      permission is the permission associated with the usage of the
      [[push-api]].
    </p>
    <dl>
      <dt>
        <a>permission descriptor type</a>
      </dt>
      <dd>
        <pre class='idl'>
          dictionary PushPermissionDescriptor : PermissionDescriptor {
            boolean userVisibleOnly = false;
          };
        </pre>
      </dd>
    </dl>
  </section>
  <section>
    <h3 id="midi">
      Midi
    </h3>
    <p>
      The <dfn for="PermissionName" enum-value>"midi"</dfn>
      permission is the permission associated with the usage of
      [[webmidi]].
    </p>
    <dl>
      <dt>
        <a>permission descriptor type</a>
      </dt>
      <dd>
        <pre class='idl'>
          dictionary MidiPermissionDescriptor : PermissionDescriptor {
            boolean sysex = false;
          };
        </pre>
      </dd>
    </dl>
  </section>
  <section>
    <h3 id="media-devices">
      Media Devices
    </h3>
    <p dfn-for="PermissionName" dfn-type="enum-value">
      The <dfn>"camera"</dfn>, <dfn>"microphone"</dfn> , and
      <dfn>"speaker"</dfn>
      permissions are associated with permission to use media devices as
      specified in [[GETUSERMEDIA]] and [[audio-output]].
    </p>
    <dl>
      <dt>
        <a>permission descriptor type</a>
      </dt>
      <dd>
        <pre class='idl'>
          dictionary DevicePermissionDescriptor : PermissionDescriptor {
            DOMString deviceId;
          };
        </pre>
        <p>
          A permission covers access to the device given in the associated
          descriptor.
        </p>
        <p>
          If the descriptor does not have a {{deviceId}}, its semantic is that
          it queries for access to all devices of that class. Thus, if a
          query for the {{"camera"}} permission with no {{deviceId}} returns
          {{"granted"}}, the client knows that there will never be a permission
          prompt for a camera, and if {{"denied"}} is returned, it knows that
          no getUserMedia request for a camera will succeed.
        </p>
        <p>
          If a permission state is present for access to some, but not all,
          cameras, a query without the {{deviceId}} will return {{"prompt"}}.
        </p>
      </dd>
      <dt>
        <a>permission storage type</a>
      </dt>
      <dd>
        TODO
      </dd>
      <dt>
        <a>permission result type</a>
      </dt>
      <dd>
        TODO
      </dd>
      <dt>
        <a>permission query algorithm</a>
      </dt>
      <dd>
        TODO
      </dd>
      <dt>
        <a>permission request algorithm</a>
      </dt>
      <dd>
        TODO
      </dd>
      <dt>
        <a>permission revocation algorithm</a>
      </dt>
      <dd>
        TODO: Stop playing/recording data?
      </dd>
    </dl>
    <p>
      The <dfn for="PermissionName" enum-value>"device-info"</dfn>
      permission controls access to names and capabilities of input and
      output devices.
    </p>
    <p>
      A successful call to the <code>getUserMedia</code> function of
      [[GETUSERMEDIA]] MUST cause permission to be granted for the returned
      devices, and MAY cause other permissions to be granted.
    </p>
    <p>
      Stopping a MediaStreamTrack MAY cause permission to be revoked for
      the associated device.
    </p>
  </section>
  <section>
    <h3 id="background-sync">
      Background Sync
    </h3>
    <p>
      The <dfn for="PermissionName" enum-value>"background-sync"</dfn>
      permission is the permission associated with the usage of
      [[web-background-sync]].
    </p>
  </section>
</section>
<section>
  <h2 dfn-type="dfn" export>
    Permission Store
  </h2>
  <p>
    <a lt='user agent'>User agents</a> MAY use a form of storage to
    keep track of web site permissions. When they do, they MUST have a
    <dfn export>permission storage identifier</dfn> which is linked to a
    {{PermissionStorage}} instance or one of its subtypes.
  </p>
  <p>
    To <dfn>get a permission storage identifier</dfn> for a
    {{PermissionName}} <var>name</var> and an <a>environment settings
    object</a> <var>settings</var>, the UA MUST return a tuple consisting
    of:
  </p>
  <ol>
    <li>
      <var>name</var>
    </li>
    <li>
      <var>settings</var>' <a>origin</a>
    </li>
    <li>optional UA-specific data like whether <var>settings</var>'
    <a>browsing context</a> has a <a>parent browsing context</a>, or
    <var>settings</var>' <a>top-level browsing context</a>'s <a>origin</a>
    </li>
  </ol>
  <pre class='idl'>
    dictionary PermissionStorage {
      // PermissionStorage is just an explanatory device.
      // Instances are never received from or passed to Javascript code.

      required PermissionState state;
    };
  </pre>
  <p>
    The steps to <dfn>retrieve a permission storage entry</dfn> of a
    <a>permission storage identifier</a> are as follows:
  </p>
  <ol>
    <li>If the <a>user agent</a> has a {{PermissionStorage}} associated
    with the <a>permission storage identifier</a> in its permission store,
    it MUST return the {{PermissionStorage}}.
    </li>
    <li>Otherwise, it MUST return <code>undefined</code>.
    </li>
  </ol>
  <p>
    The steps to <dfn>create a permission storage entry</dfn> for a
    <a>permission storage identifier</a> are as follows:
  </p>
  <ol>
    <li>If the <a>user agent</a> has a {{PermissionStorage}} associated
    with the <a>permission storage identifier</a> in its permission store,
    it MUST overwrite it to the given {{PermissionStorage}}.
    </li>
    <li>Otherwise, it MUST write the new {{PermissionStorage}} to its
    permission store.
    </li>
  </ol>
  <p>
    The steps to <dfn>delete a permission storage entry</dfn> of a
    <a>permission storage identifier</a> are as follows:
  </p>
  <ol>
    <li>If the <a>user agent</a> has a {{PermissionStorage}} associated
    with the <a>permission storage identifier</a> in its permission store,
    it MUST remove it.
    </li>
  </ol>
</section>
<section>
  <h2 id="status-of-a-permission">
    Status of a permission
  </h2>
  <pre class='idl'>
    enum PermissionState {
      "granted",
      "denied",
      "prompt",
    };
  </pre>
  <p>
    The <dfn for="PermissionState" enum-value>"granted"</dfn> state represents
    that the caller will be able
    to successfuly access the feature without having the <a>user agent</a>
    asking the user's permission.
  </p>
  <p>
    The <dfn for="PermissionState" enum-value>"denied"</dfn> state represents
    that the caller will not be
    able to access the feature.
  </p>
  <p>
    The <dfn for="PermissionState" enum-value>"prompt"</dfn> state represents
    that the <a>user agent</a>
    will be asking the user's permission if the caller tries to access the
    feature. The user might grant, deny or dismiss the request.
  </p>
  <p>
    The steps to <dfn export>retrieve the permission storage</dfn> for a given
    {{PermissionName}} <var>name</var> are as follows:
  </p>
  <ol>
    <li>
      <a>Get a permission storage identifier</a> for <var>name</var> and
      the current <a>environment settings object</a>, and let
      <var>identifier</var> be the result.
    </li>
    <li>Run the steps to <a>retrieve a permission storage entry</a> of
    <var>identifier</var>.
    </li>
    <li>If the result of those steps are not <code>undefined</code>, return
    it and abort these steps.
    </li>
    <li>Otherwise, the <a>user agent</a> MUST return a default value based
    on <a>user agent</a>'s defined heuristics. For example, <code>{state:
    {{"prompt"}}}</code> can be a default value, but it can also be based on
    frequency of visits.
    </li>
  </ol>
  <pre class='idl'>
    [Exposed=(Window,Worker)]
    interface PermissionStatus : EventTarget {
      readonly attribute PermissionState state;
      attribute EventHandler onchange;
    };
  </pre>
  <p>
    {{PermissionStatus}} instances are created with the following
    internal slots:
  </p>
  <dl>
    <dt>
      <dfn for="PermissionStatus" attribute>\[[permission]]</dfn>
    </dt>
    <dd>
      A <a>permission</a>. {{[[permission]]}} is always the
      <a>permission</a> named <code>{{[[query]]}}.{{PermissionDescriptor/name}}</code>.
    </dd>
    <dt>
      <dfn for="PermissionStatus" attribute>\[[query]]</dfn>
    </dt>
    <dd>
      A {{PermissionDescriptor}}.
    </dd>
  </dl>
  <p>
    The steps to <dfn>update the state</dfn> of a
    {{PermissionStatus}} instance <var>status</var> are as
    follows:
  </p>
  <ol>
    <li>Run the steps to <a>retrieve the permission storage</a> for
      <code><var>status</var>@{{[[query]]}}.{{PermissionDescriptor/name}}</code>,
      and let <var>storage</var> be the result.
    </li>
    <li>Run <code><var>status</var>@{{[[permission]]}}</code>'s <a>permission
    query algorithm</a>, passing <code><var>status</var>@{{[[query]]}}</code>,
    <var>storage</var>, and <var>status</var>.
    </li>
  </ol>
  <p>
    The steps to <dfn>create a PermissionStatus</dfn> for a given
    {{PermissionDescriptor}} <var>permissionDesc</var> are as follow:
  </p>
  <ol>
    <li>Let <var>permission</var> be the <a>permission</a> named by <code>
      <var>permissionDesc</var>.name</code>.
    </li>
    <li>Let <var>status</var> be a new instance of <var>permission</var>'s
    <a>permission result type</a>, with the internal slots filled as:
      <table class="data">
        <thead>
          <tr>
            <th>
              Slot
            </th>
            <th>
              Value
            </th>
          </tr>
        </thead>
        <tr>
          <td>
            {{PermissionStatus/[[permission]]}}
          </td>
          <td>
            <var>permission</var>
          </td>
        </tr>
        <tr>
          <td>
            {{PermissionStatus/[[query]]}}
          </td>
          <td>
            <var>permissionDesc</var>
          </td>
        </tr>
      </table>
    </li>
    <li>Return <var>status</var>.
    </li>
  </ol>
  <p>
    The <dfn for="PermissionStatus" attribute>state</dfn>
    attribute MUST return the latest value that was set on the current
    instance.
  </p>
  <p>
    The <dfn for="PermissionStatus" attribute>onchange</dfn> attribute is an
    <a>event handler</a> whose corresponding <a>event handler event
    type</a> is <code>change</code>.
  </p>
  <p id="PermissionStatus-update">
    Whenever the <a>user agent</a> is aware that the state of a
    {{PermissionStatus}} instance <var>status</var> has changed,
    it MUST asynchronously run the following steps:
  </p>
  <ol>
    <li>Run the steps to <a>update the state</a> of <var>status</var>.
    </li>
    <li>
      <a>Queue a task</a> on the <dfn>permission task source</dfn> to
      <a>fire an event</a> named <code>change</code> at
      <var>status</var>.
    </li>
  </ol>
</section>
<section>
  <h2 id="navigator-and-workernavigator-extension">
    Navigator and WorkerNavigator extension
  </h2>
  <p>
    A {{Permissions}} instance is exposed on the <code>navigator</code>
    object for {{Window}} and {{Worker}} contexts.
  </p>
  <pre class='idl'>
    [Exposed=(Window)]
    partial interface Navigator {
      readonly attribute Permissions permissions;
    };
  </pre>
  <pre class='idl'>
    [Exposed=(Worker)]
    partial interface WorkerNavigator {
      readonly attribute Permissions permissions;
    };
  </pre>
</section>
<section>
  <h2 id="permissions-interface">
    Permissions interface
  </h2>
  <pre class='idl'>
    [Exposed=(Window,Worker)]
    interface Permissions {
      Promise&lt;PermissionStatus&gt; query(PermissionDescriptor permissionDesc);

      Promise&lt;PermissionStatus&gt; request(PermissionDescriptor permissionDesc);

      Promise&lt;PermissionStatus&gt; revoke(PermissionDescriptor permissionDesc);
    };
  </pre>
  <p>
    When the <dfn for='Permissions' method>query()</dfn> method is invoked,
    the <a>user agent</a> MUST run the following <dfn export>query a
    permission</dfn> algorithm, passing the parameter
    <var>permissionDesc</var>:
  </p>
  <ol>
    <li>If <code><var>permissionDesc</var>.name</code> has a <a>permission
    descriptor type</a> other than {{PermissionDescriptor}}, convert the
    underlying ECMAScript object to the <a>permission descriptor type</a>
    dictionary as
    <a href='http://heycam.github.io/webidl/#es-dictionary'>described</a> in
    [[!WEBIDL]], then:
      <ul>
        <li>If that operation failed, return a {{Promise}} rejected with
        a {{TypeError}} and abort these steps.
        </li>
        <li>Otherwise, set <var>permissionDesc</var> to the result of the
        operation.
        </li>
      </ul>
    </li>
    <li>Let <var>promise</var> be a newly-created {{Promise}}.
    </li>
    <li>Return <var>promise</var> and continue the following steps
    asynchronously.
    </li>
    <li>Run the steps to <a>create a PermissionStatus</a> for
    <var>permissionDesc</var>, and let <var>status</var> be the result.
    </li>
    <li>Run the steps to <a>update the state</a> on <var>status</var>.
    </li>
    <li>Resolve <var>promise</var> with <var>status</var>.
    </li>
  </ol>
  <div class='note'>
    If a developer wants to check multiple permissions at once, the editors
    recommend the use of <code>{{Promise}}.all()</code>. An example can be
    found in the <a href='#examples'>Examples section</a>.
  </div>
  <p>
    When the <dfn for='Permissions' method>request()</dfn> method is invoked,
    the <a>user agent</a> MUST run the following <dfn export>request a
    permission</dfn> algorithm, passing the parameter
    <var>permissionDesc</var>:
  </p>
  <ol class="algorithm">
    <li>If <code><var>permissionDesc</var>.name</code> has a <a>permission
    descriptor type</a> other than {{PermissionDescriptor}}, convert the
    underlying ECMAScript object to the <a>permission descriptor type</a>
    dictionary as
    <a href='http://heycam.github.io/webidl/#es-dictionary'>described</a> in
    [[!WEBIDL]], then:
      <ul>
        <li>If that operation failed, return a {{Promise}} rejected with
        a {{TypeError}} and abort these steps.
        </li>
        <li>Otherwise, set <var>permissionDesc</var> to the result of the
        operation.
        </li>
      </ul>
    </li>
    <li>Let <var>promise</var> be a newly-created {{Promise}}.
    </li>
    <li>Return <var>promise</var> and continue the following steps
    asynchronously.
    </li>
    <li>Let <var>permission</var> be the <a>permission</a> named by <code>
      <var>permissionDesc</var>.name</code>.
    </li>
    <li>Run the steps to <a>create a PermissionStatus</a> for
    <var>permissionDesc</var>, and let <var>status</var> be the result.
    </li>
    <li>Run the steps to <a>retrieve the permission storage</a> for
    <var>permission</var>, and let <var>storage</var> be the result.
    </li>
    <li>Let <var>result</var> be the result of <a>promise-calling</a>
      <var>permission</var>'s <a>permission request algorithm</a> with
      <var>storage</var>, <var>permissionDesc</var>, and <var>status</var>
      as arguments.
    </li>
    <li>Resolve <var>promise</var> with the result of <a>transforming</a>
    <var>result</var> with a fulfillment handler that runs the following
    steps.
    </li>
    <li>
      <a>Get a permission storage identifier</a> for
      <code><var>permissionDesc</var>.name</code> and the current
      <a>environment settings object</a>, and <a>create a permission
      storage entry</a> mapping this identifier to <var>storage</var>.
    </li>
    <li>Return <var>status</var>.
    </li>
  </ol>
  <p>
    When the <dfn for='Permissions' method>revoke()</dfn>
    method is invoked, the <a>user agent</a> MUST run the following
    <dfn export>revoke a permission</dfn> algorithm, passing the
    parameter <var>permissionDesc</var>:
  </p>
  <ol>
    <li>If <code><var>permissionDesc</var>.name</code> has a <a>permission
    descriptor type</a> other than {{PermissionDescriptor}}, convert the
    underlying ECMAScript object to the <a>permission descriptor type</a>
    dictionary as
    <a href='http://heycam.github.io/webidl/#es-dictionary'>described</a> in
    [[!WEBIDL]], then:
      <ul>
        <li>If that operation failed, return a {{Promise}} rejected with
        a {{TypeError}} and abort these steps.
        </li>
        <li>Otherwise, set <var>permissionDesc</var> to the result of the
        operation.
        </li>
      </ul>
    </li>
    <li>Let <var>promise</var> be a newly-created {{Promise}}.
    </li>
    <li>Return <var>promise</var> and continue the following steps
    asynchronously.
    </li>
    <li>
      <a>Get a permission storage identifier</a> for
      <code><var>permission</var>.name</code> and the current
      <a>environment settings object</a>, and let <var>identifier</var> be
      the result.
    </li>
    <li>Run the steps to <a>delete a permission storage entry</a> using
    <var>identifier</var>.
    </li>
    <li>Run <code><var>permissionDesc</var>.name</code>'s <a>permission revocation
    algorithm</a>.
    </li>
    <li>Run the steps to <a>create a PermissionStatus</a> for
    <var>permissionDesc</var>, and let <var>status</var> be the result.
    </li>
    <li>Run the steps to <a>update the state</a> on <var>status</var>.
    </li>
    <li>Resolve <var>promise</var> with <var>status</var>.
    </li>
  </ol>
</section>
<section>
  <h2 id="common-permission-algorithms">
    Common permission algorithms
  </h2>
  <p>
    The <dfn export>boolean permission query algorithm</dfn>, given a
    {{PermissionDescriptor}} <var>permissionDesc</var>, a
    {{PermissionStorage}} <var>storage</var>, and a
    {{PermissionStatus}} <var>status</var>, runs the following steps:
  </p>
  <ol class="algorithm">
    <li>Set <code><var>status</var>.state</code> to
    <code><var>storage</var>.state</code>
    </li>
  </ol>
  <p>
    The <dfn export>boolean permission request algorithm</dfn>, given a
    {{PermissionDescriptor}} <var>permission</var> and a
    {{PermissionStatus}} <var>status</var>, runs the following steps:
  </p>
  <ol class="algorithm">
    <li>TODO
    </li>
  </ol>
</section>
<section class='non-normative'>
  <h2 id="examples">
    Examples
  </h2>
  <div class="example" id="example-geolocation">
  <p>
    This example uses the Permissions API to decide whether local news
    should be shown using the Geolocation API or with a button offering to
    add the feature.
  </p>
  <pre class='highlight'>
    &lt;script&gt;
      navigator.permissions.query({name:'geolocation'}).then(function(result) {
        if (result.state == 'granted') {
          showLocalNewsWithGeolocation();
        } else if (result.state == 'prompt') {
          showButtonToEnableLocalNews();
        }
        // Don't do anything if the permission was denied.
      });
    &lt;/script&gt;
  </pre>
  </div>
  <div class="example" id="example-notifications">
  <p>
    This example is using the {{"notifications"}} permission for a
    chat application to show a notification button depending on the
    permission state.
  </p>
  <pre class='highlight'>
    &lt;script&gt;
      function updateNotificationButton(state) {
        document.getElementById('chat-notification-button').disabled = (state == 'denied');
      }

      navigator.permissions.query({name:'notifications'}).then(function(result) {
        updateNotificationButton(result.state);

        result.addEventListener('change', function() {
          updateNotificationButton(this.state);
        });
      });
    &lt;/script&gt;
  </pre>
  </div>
  <div class="example" id="example-two-permissions">
  <p>
    This example is checking whether the page has the
    {{"geolocation"}} and the {{"notifications"}} permissions
    using <code>{{Promise}}.all</code>.
  </p>
  <pre class='highlight'>
    &lt;script&gt;
      Promise.all([navigator.permissions.query({name:'geolocation'}),
                   navigator.permissions.query({name:'notifications'})])
      .then(function(result) {
        console.log('Geolocation permission state is ' + result[0].state);
        console.log('Notifications permission state is ' + result[1].state);
      });
    &lt;/script&gt;
  </pre>
  </div>
  <div class="example" id="example-deviceId">
  <p>
    This example is checking whether the page has the {{"camera"}}
    permission for the first device in the list. Error checking omitted.
  </p>
  <pre class='highlight'>
    &lt;script&gt;
      navigator.mediaDevices.enumerateDevices()
      .then(function(devices) {
         return navigator.permissions.query({name:'camera',
                                             deviceId: devices[0].deviceId})
      })
      .then(function(result) {
         console.log('Camera permission to first camera is ' + result.state);
      }
      .catch(err =&gt; console.log('Bad things happened: ' + err.name));
    &lt;/script&gt;
  </pre>
  </div>
</section>
<section class='non-normative'>
  <h2 id="acknowledgments" class="no-num">
    Acknowledgments
  </h2>
  <p>
    The editors would like to thank Adrienne Porter Felt, Anne van
    Kesteren, Domenic Denicola, Jake Archibald and Wendy Seltzer for their
    help with the API design and editorial work.
  </p>
</section>
